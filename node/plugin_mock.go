// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/perlin-network/wavelet/node (interfaces: NodeInterface)

// Package node is a generated GoMock package.
package node

import (
	gomock "github.com/golang/mock/gomock"
	wire "github.com/perlin-network/graph/wire"
	network "github.com/perlin-network/noise/network"
	wavelet "github.com/perlin-network/wavelet"
	reflect "reflect"
)

// MockNodeInterface is a mock of NodeInterface interface
type MockNodeInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNodeInterfaceMockRecorder
}

// MockNodeInterfaceMockRecorder is the mock recorder for MockNodeInterface
type MockNodeInterfaceMockRecorder struct {
	mock *MockNodeInterface
}

// NewMockNodeInterface creates a new mock instance
func NewMockNodeInterface(ctrl *gomock.Controller) *MockNodeInterface {
	mock := &MockNodeInterface{ctrl: ctrl}
	mock.recorder = &MockNodeInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNodeInterface) EXPECT() *MockNodeInterfaceMockRecorder {
	return m.recorder
}

// BroadcastTransaction mocks base method
func (m *MockNodeInterface) BroadcastTransaction(arg0 *wire.Transaction) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BroadcastTransaction", arg0)
}

// BroadcastTransaction indicates an expected call of BroadcastTransaction
func (mr *MockNodeInterfaceMockRecorder) BroadcastTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastTransaction", reflect.TypeOf((*MockNodeInterface)(nil).BroadcastTransaction), arg0)
}

// Cleanup mocks base method
func (m *MockNodeInterface) Cleanup(arg0 *network.Network) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cleanup", arg0)
}

// Cleanup indicates an expected call of Cleanup
func (mr *MockNodeInterfaceMockRecorder) Cleanup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockNodeInterface)(nil).Cleanup), arg0)
}

// LedgerDo mocks base method
func (m *MockNodeInterface) LedgerDo(arg0 func(wavelet.LedgerInterface)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LedgerDo", arg0)
}

// LedgerDo indicates an expected call of LedgerDo
func (mr *MockNodeInterfaceMockRecorder) LedgerDo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LedgerDo", reflect.TypeOf((*MockNodeInterface)(nil).LedgerDo), arg0)
}

// MakeTransaction mocks base method
func (m *MockNodeInterface) MakeTransaction(arg0 uint32, arg1 []byte) *wire.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeTransaction", arg0, arg1)
	ret0, _ := ret[0].(*wire.Transaction)
	return ret0
}

// MakeTransaction indicates an expected call of MakeTransaction
func (mr *MockNodeInterfaceMockRecorder) MakeTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeTransaction", reflect.TypeOf((*MockNodeInterface)(nil).MakeTransaction), arg0, arg1)
}

// PeerConnect mocks base method
func (m *MockNodeInterface) PeerConnect(arg0 *network.PeerClient) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PeerConnect", arg0)
}

// PeerConnect indicates an expected call of PeerConnect
func (mr *MockNodeInterfaceMockRecorder) PeerConnect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeerConnect", reflect.TypeOf((*MockNodeInterface)(nil).PeerConnect), arg0)
}

// PeerDisconnect mocks base method
func (m *MockNodeInterface) PeerDisconnect(arg0 *network.PeerClient) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PeerDisconnect", arg0)
}

// PeerDisconnect indicates an expected call of PeerDisconnect
func (mr *MockNodeInterfaceMockRecorder) PeerDisconnect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeerDisconnect", reflect.TypeOf((*MockNodeInterface)(nil).PeerDisconnect), arg0)
}

// Receive mocks base method
func (m *MockNodeInterface) Receive(arg0 *network.PluginContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Receive indicates an expected call of Receive
func (mr *MockNodeInterfaceMockRecorder) Receive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockNodeInterface)(nil).Receive), arg0)
}

// Startup mocks base method
func (m *MockNodeInterface) Startup(arg0 *network.Network) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Startup", arg0)
}

// Startup indicates an expected call of Startup
func (mr *MockNodeInterfaceMockRecorder) Startup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Startup", reflect.TypeOf((*MockNodeInterface)(nil).Startup), arg0)
}
