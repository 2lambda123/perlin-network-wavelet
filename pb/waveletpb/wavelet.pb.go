// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/wavelet.proto

/*
	Package waveletpb is a generated protocol buffer package.

	It is generated from these files:
		proto/wavelet.proto

	It has these top-level messages:
		QueryRequest
		QueryResponse
		OutOfSyncResponse
		SyncInitRequest
		SyncInitResponse
		SyncChunkRequest
		SyncChunkResponse
		DownloadTxRequest
		Transactions
*/
package waveletpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type QueryRequest struct {
	Round []byte `protobuf:"bytes,1,opt,name=round,proto3" json:"round,omitempty"`
}

func (m *QueryRequest) Reset()                    { *m = QueryRequest{} }
func (m *QueryRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()               {}
func (*QueryRequest) Descriptor() ([]byte, []int) { return fileDescriptorWavelet, []int{0} }

func (m *QueryRequest) GetRound() []byte {
	if m != nil {
		return m.Round
	}
	return nil
}

type QueryResponse struct {
	Preferred []byte `protobuf:"bytes,1,opt,name=preferred,proto3" json:"preferred,omitempty"`
}

func (m *QueryResponse) Reset()                    { *m = QueryResponse{} }
func (m *QueryResponse) String() string            { return proto.CompactTextString(m) }
func (*QueryResponse) ProtoMessage()               {}
func (*QueryResponse) Descriptor() ([]byte, []int) { return fileDescriptorWavelet, []int{1} }

func (m *QueryResponse) GetPreferred() []byte {
	if m != nil {
		return m.Preferred
	}
	return nil
}

type OutOfSyncResponse struct {
	Round []byte `protobuf:"bytes,1,opt,name=round,proto3" json:"round,omitempty"`
}

func (m *OutOfSyncResponse) Reset()                    { *m = OutOfSyncResponse{} }
func (m *OutOfSyncResponse) String() string            { return proto.CompactTextString(m) }
func (*OutOfSyncResponse) ProtoMessage()               {}
func (*OutOfSyncResponse) Descriptor() ([]byte, []int) { return fileDescriptorWavelet, []int{2} }

func (m *OutOfSyncResponse) GetRound() []byte {
	if m != nil {
		return m.Round
	}
	return nil
}

type SyncInitRequest struct {
	ViewId uint64 `protobuf:"varint,1,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
}

func (m *SyncInitRequest) Reset()                    { *m = SyncInitRequest{} }
func (m *SyncInitRequest) String() string            { return proto.CompactTextString(m) }
func (*SyncInitRequest) ProtoMessage()               {}
func (*SyncInitRequest) Descriptor() ([]byte, []int) { return fileDescriptorWavelet, []int{3} }

func (m *SyncInitRequest) GetViewId() uint64 {
	if m != nil {
		return m.ViewId
	}
	return 0
}

type SyncInitResponse struct {
	LatestViewId uint64   `protobuf:"varint,1,opt,name=latest_view_id,json=latestViewId,proto3" json:"latest_view_id,omitempty"`
	ChunkHashes  [][]byte `protobuf:"bytes,2,rep,name=chunkHashes" json:"chunkHashes,omitempty"`
}

func (m *SyncInitResponse) Reset()                    { *m = SyncInitResponse{} }
func (m *SyncInitResponse) String() string            { return proto.CompactTextString(m) }
func (*SyncInitResponse) ProtoMessage()               {}
func (*SyncInitResponse) Descriptor() ([]byte, []int) { return fileDescriptorWavelet, []int{4} }

func (m *SyncInitResponse) GetLatestViewId() uint64 {
	if m != nil {
		return m.LatestViewId
	}
	return 0
}

func (m *SyncInitResponse) GetChunkHashes() [][]byte {
	if m != nil {
		return m.ChunkHashes
	}
	return nil
}

type SyncChunkRequest struct {
	ChunkHash []byte `protobuf:"bytes,1,opt,name=chunk_hash,json=chunkHash,proto3" json:"chunk_hash,omitempty"`
}

func (m *SyncChunkRequest) Reset()                    { *m = SyncChunkRequest{} }
func (m *SyncChunkRequest) String() string            { return proto.CompactTextString(m) }
func (*SyncChunkRequest) ProtoMessage()               {}
func (*SyncChunkRequest) Descriptor() ([]byte, []int) { return fileDescriptorWavelet, []int{5} }

func (m *SyncChunkRequest) GetChunkHash() []byte {
	if m != nil {
		return m.ChunkHash
	}
	return nil
}

type SyncChunkResponse struct {
	Diff []byte `protobuf:"bytes,1,opt,name=diff,proto3" json:"diff,omitempty"`
}

func (m *SyncChunkResponse) Reset()                    { *m = SyncChunkResponse{} }
func (m *SyncChunkResponse) String() string            { return proto.CompactTextString(m) }
func (*SyncChunkResponse) ProtoMessage()               {}
func (*SyncChunkResponse) Descriptor() ([]byte, []int) { return fileDescriptorWavelet, []int{6} }

func (m *SyncChunkResponse) GetDiff() []byte {
	if m != nil {
		return m.Diff
	}
	return nil
}

type DownloadTxRequest struct {
	Ids [][]byte `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *DownloadTxRequest) Reset()                    { *m = DownloadTxRequest{} }
func (m *DownloadTxRequest) String() string            { return proto.CompactTextString(m) }
func (*DownloadTxRequest) ProtoMessage()               {}
func (*DownloadTxRequest) Descriptor() ([]byte, []int) { return fileDescriptorWavelet, []int{7} }

func (m *DownloadTxRequest) GetIds() [][]byte {
	if m != nil {
		return m.Ids
	}
	return nil
}

type Transactions struct {
	Transactions [][]byte `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *Transactions) Reset()                    { *m = Transactions{} }
func (m *Transactions) String() string            { return proto.CompactTextString(m) }
func (*Transactions) ProtoMessage()               {}
func (*Transactions) Descriptor() ([]byte, []int) { return fileDescriptorWavelet, []int{8} }

func (m *Transactions) GetTransactions() [][]byte {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryRequest)(nil), "wavelet.QueryRequest")
	proto.RegisterType((*QueryResponse)(nil), "wavelet.QueryResponse")
	proto.RegisterType((*OutOfSyncResponse)(nil), "wavelet.OutOfSyncResponse")
	proto.RegisterType((*SyncInitRequest)(nil), "wavelet.SyncInitRequest")
	proto.RegisterType((*SyncInitResponse)(nil), "wavelet.SyncInitResponse")
	proto.RegisterType((*SyncChunkRequest)(nil), "wavelet.SyncChunkRequest")
	proto.RegisterType((*SyncChunkResponse)(nil), "wavelet.SyncChunkResponse")
	proto.RegisterType((*DownloadTxRequest)(nil), "wavelet.DownloadTxRequest")
	proto.RegisterType((*Transactions)(nil), "wavelet.Transactions")
}
func (m *QueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Round) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWavelet(dAtA, i, uint64(len(m.Round)))
		i += copy(dAtA[i:], m.Round)
	}
	return i, nil
}

func (m *QueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Preferred) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWavelet(dAtA, i, uint64(len(m.Preferred)))
		i += copy(dAtA[i:], m.Preferred)
	}
	return i, nil
}

func (m *OutOfSyncResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutOfSyncResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Round) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWavelet(dAtA, i, uint64(len(m.Round)))
		i += copy(dAtA[i:], m.Round)
	}
	return i, nil
}

func (m *SyncInitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncInitRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ViewId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWavelet(dAtA, i, uint64(m.ViewId))
	}
	return i, nil
}

func (m *SyncInitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncInitResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LatestViewId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWavelet(dAtA, i, uint64(m.LatestViewId))
	}
	if len(m.ChunkHashes) > 0 {
		for _, b := range m.ChunkHashes {
			dAtA[i] = 0x12
			i++
			i = encodeVarintWavelet(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *SyncChunkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncChunkRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChunkHash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWavelet(dAtA, i, uint64(len(m.ChunkHash)))
		i += copy(dAtA[i:], m.ChunkHash)
	}
	return i, nil
}

func (m *SyncChunkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncChunkResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Diff) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWavelet(dAtA, i, uint64(len(m.Diff)))
		i += copy(dAtA[i:], m.Diff)
	}
	return i, nil
}

func (m *DownloadTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownloadTxRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, b := range m.Ids {
			dAtA[i] = 0xa
			i++
			i = encodeVarintWavelet(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *Transactions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transactions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Transactions) > 0 {
		for _, b := range m.Transactions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintWavelet(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func encodeFixed64Wavelet(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Wavelet(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintWavelet(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *QueryRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Round)
	if l > 0 {
		n += 1 + l + sovWavelet(uint64(l))
	}
	return n
}

func (m *QueryResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Preferred)
	if l > 0 {
		n += 1 + l + sovWavelet(uint64(l))
	}
	return n
}

func (m *OutOfSyncResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Round)
	if l > 0 {
		n += 1 + l + sovWavelet(uint64(l))
	}
	return n
}

func (m *SyncInitRequest) Size() (n int) {
	var l int
	_ = l
	if m.ViewId != 0 {
		n += 1 + sovWavelet(uint64(m.ViewId))
	}
	return n
}

func (m *SyncInitResponse) Size() (n int) {
	var l int
	_ = l
	if m.LatestViewId != 0 {
		n += 1 + sovWavelet(uint64(m.LatestViewId))
	}
	if len(m.ChunkHashes) > 0 {
		for _, b := range m.ChunkHashes {
			l = len(b)
			n += 1 + l + sovWavelet(uint64(l))
		}
	}
	return n
}

func (m *SyncChunkRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ChunkHash)
	if l > 0 {
		n += 1 + l + sovWavelet(uint64(l))
	}
	return n
}

func (m *SyncChunkResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Diff)
	if l > 0 {
		n += 1 + l + sovWavelet(uint64(l))
	}
	return n
}

func (m *DownloadTxRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, b := range m.Ids {
			l = len(b)
			n += 1 + l + sovWavelet(uint64(l))
		}
	}
	return n
}

func (m *Transactions) Size() (n int) {
	var l int
	_ = l
	if len(m.Transactions) > 0 {
		for _, b := range m.Transactions {
			l = len(b)
			n += 1 + l + sovWavelet(uint64(l))
		}
	}
	return n
}

func sovWavelet(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozWavelet(x uint64) (n int) {
	return sovWavelet(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWavelet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWavelet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWavelet
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Round = append(m.Round[:0], dAtA[iNdEx:postIndex]...)
			if m.Round == nil {
				m.Round = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWavelet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWavelet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWavelet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preferred", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWavelet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWavelet
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Preferred = append(m.Preferred[:0], dAtA[iNdEx:postIndex]...)
			if m.Preferred == nil {
				m.Preferred = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWavelet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWavelet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutOfSyncResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWavelet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutOfSyncResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutOfSyncResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWavelet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWavelet
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Round = append(m.Round[:0], dAtA[iNdEx:postIndex]...)
			if m.Round == nil {
				m.Round = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWavelet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWavelet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncInitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWavelet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncInitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncInitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewId", wireType)
			}
			m.ViewId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWavelet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ViewId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWavelet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWavelet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncInitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWavelet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncInitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncInitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestViewId", wireType)
			}
			m.LatestViewId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWavelet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestViewId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkHashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWavelet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWavelet
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChunkHashes = append(m.ChunkHashes, make([]byte, postIndex-iNdEx))
			copy(m.ChunkHashes[len(m.ChunkHashes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWavelet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWavelet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncChunkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWavelet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncChunkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncChunkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWavelet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWavelet
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChunkHash = append(m.ChunkHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ChunkHash == nil {
				m.ChunkHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWavelet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWavelet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncChunkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWavelet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncChunkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncChunkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diff", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWavelet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWavelet
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Diff = append(m.Diff[:0], dAtA[iNdEx:postIndex]...)
			if m.Diff == nil {
				m.Diff = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWavelet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWavelet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownloadTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWavelet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownloadTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownloadTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWavelet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWavelet
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, make([]byte, postIndex-iNdEx))
			copy(m.Ids[len(m.Ids)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWavelet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWavelet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Transactions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWavelet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transactions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transactions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWavelet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWavelet
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, make([]byte, postIndex-iNdEx))
			copy(m.Transactions[len(m.Transactions)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWavelet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWavelet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWavelet(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWavelet
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWavelet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWavelet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthWavelet
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowWavelet
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipWavelet(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthWavelet = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWavelet   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("proto/wavelet.proto", fileDescriptorWavelet) }

var fileDescriptorWavelet = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xdf, 0x4e, 0xc2, 0x30,
	0x18, 0xc5, 0x9d, 0x20, 0xc4, 0xcf, 0xaa, 0x30, 0x4d, 0xe4, 0x42, 0x17, 0xd2, 0x60, 0x44, 0x13,
	0x35, 0xea, 0x1b, 0xa8, 0x17, 0x72, 0x45, 0x9c, 0xc4, 0x0b, 0x6e, 0x48, 0x61, 0xdf, 0xb2, 0x45,
	0xd2, 0xce, 0xb6, 0x03, 0x79, 0x0b, 0x1f, 0xcb, 0x4b, 0x1f, 0xc1, 0xe0, 0x8b, 0x98, 0x6d, 0x2d,
	0x7f, 0x12, 0xef, 0x7a, 0x4e, 0x7e, 0xe7, 0xe4, 0x34, 0x1f, 0x1c, 0x24, 0x52, 0x68, 0x71, 0x3d,
	0x65, 0x13, 0x1c, 0xa3, 0xbe, 0xca, 0x95, 0x5b, 0x35, 0x92, 0xb6, 0x80, 0x3c, 0xa7, 0x28, 0x67,
	0x3e, 0xbe, 0xa7, 0xa8, 0xb4, 0x7b, 0x08, 0x5b, 0x52, 0xa4, 0x3c, 0x68, 0x38, 0x4d, 0xa7, 0x4d,
	0xfc, 0x42, 0xd0, 0x4b, 0xd8, 0x35, 0x94, 0x4a, 0x04, 0x57, 0xe8, 0x1e, 0xc3, 0x76, 0x22, 0x31,
	0x44, 0x29, 0xd1, 0xa2, 0x4b, 0x83, 0x9e, 0x43, 0xbd, 0x9b, 0xea, 0x6e, 0xf8, 0x32, 0xe3, 0xa3,
	0x45, 0xe4, 0xff, 0xe6, 0x0b, 0xd8, 0xcf, 0xa8, 0x0e, 0x8f, 0xb5, 0x9d, 0x70, 0x04, 0xd5, 0x49,
	0x8c, 0xd3, 0x41, 0x5c, 0xa0, 0x65, 0xbf, 0x92, 0xc9, 0x4e, 0x40, 0xfb, 0x50, 0x5b, 0xb2, 0xa6,
	0xb5, 0x05, 0x7b, 0x63, 0xa6, 0x51, 0xe9, 0xc1, 0x7a, 0x86, 0x14, 0xee, 0x6b, 0x9e, 0x74, 0x9b,
	0xb0, 0x33, 0x8a, 0x52, 0xfe, 0xf6, 0xc4, 0x54, 0x84, 0xaa, 0xb1, 0xd9, 0x2c, 0xb5, 0x89, 0xbf,
	0x6a, 0xd1, 0x9b, 0xa2, 0xfb, 0x21, 0xb3, 0xec, 0x90, 0x13, 0x80, 0x1c, 0x19, 0x44, 0x4c, 0x45,
	0xf6, 0x97, 0x8b, 0x10, 0x3d, 0x83, 0xfa, 0x4a, 0xc4, 0xec, 0x71, 0xa1, 0x1c, 0xc4, 0x61, 0x68,
	0xe8, 0xfc, 0x4d, 0x4f, 0xa1, 0xfe, 0x28, 0xa6, 0x7c, 0x2c, 0x58, 0xd0, 0xfb, 0xb0, 0xe5, 0x35,
	0x28, 0xc5, 0x81, 0x6a, 0x38, 0xf9, 0x94, 0xec, 0x49, 0x6f, 0x81, 0xf4, 0x24, 0xe3, 0x8a, 0x8d,
	0x74, 0x2c, 0xb8, 0x72, 0x29, 0x10, 0xbd, 0xa2, 0x0d, 0xba, 0xe6, 0xdd, 0x7b, 0x5f, 0x73, 0xcf,
	0xf9, 0x9e, 0x7b, 0xce, 0xcf, 0xdc, 0x73, 0x3e, 0x7f, 0xbd, 0x8d, 0x3e, 0x49, 0x86, 0xf6, 0xd6,
	0xc9, 0x70, 0x58, 0xc9, 0xcf, 0x7d, 0xf7, 0x17, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x7f, 0x90, 0x68,
	0x05, 0x02, 0x00, 0x00,
}
