// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/perlin-network/wavelet (interfaces: LedgerInterface)

// Package wavelet is a generated GoMock package.
package wavelet

import (
	gomock "github.com/golang/mock/gomock"
	database "github.com/perlin-network/graph/database"
	wire "github.com/perlin-network/graph/wire"
	reflect "reflect"
)

// MockLedgerInterface is a mock of LedgerInterface interface
type MockLedgerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLedgerInterfaceMockRecorder
}

// MockLedgerInterfaceMockRecorder is the mock recorder for MockLedgerInterface
type MockLedgerInterfaceMockRecorder struct {
	mock *MockLedgerInterface
}

// NewMockLedgerInterface creates a new mock instance
func NewMockLedgerInterface(ctrl *gomock.Controller) *MockLedgerInterface {
	mock := &MockLedgerInterface{ctrl: ctrl}
	mock.recorder = &MockLedgerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLedgerInterface) EXPECT() *MockLedgerInterfaceMockRecorder {
	return m.recorder
}

// Accounts mocks base method
func (m *MockLedgerInterface) Accounts() *Accounts {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Accounts")
	ret0, _ := ret[0].(*Accounts)
	return ret0
}

// Accounts indicates an expected call of Accounts
func (mr *MockLedgerInterfaceMockRecorder) Accounts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accounts", reflect.TypeOf((*MockLedgerInterface)(nil).Accounts))
}

// Cleanup mocks base method
func (m *MockLedgerInterface) Cleanup() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cleanup")
	ret0, _ := ret[0].(error)
	return ret0
}

// Cleanup indicates an expected call of Cleanup
func (mr *MockLedgerInterfaceMockRecorder) Cleanup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockLedgerInterface)(nil).Cleanup))
}

// CountAscendants mocks base method
func (m *MockLedgerInterface) CountAscendants(arg0 string, arg1 int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAscendants", arg0, arg1)
	ret0, _ := ret[0].(int)
	return ret0
}

// CountAscendants indicates an expected call of CountAscendants
func (mr *MockLedgerInterfaceMockRecorder) CountAscendants(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAscendants", reflect.TypeOf((*MockLedgerInterface)(nil).CountAscendants), arg0, arg1)
}

// ExecuteContract mocks base method
func (m *MockLedgerInterface) ExecuteContract(arg0, arg1 string, arg2 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteContract", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteContract indicates an expected call of ExecuteContract
func (mr *MockLedgerInterfaceMockRecorder) ExecuteContract(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteContract", reflect.TypeOf((*MockLedgerInterface)(nil).ExecuteContract), arg0, arg1, arg2)
}

// FindEligibleParents mocks base method
func (m *MockLedgerInterface) FindEligibleParents() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEligibleParents")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEligibleParents indicates an expected call of FindEligibleParents
func (mr *MockLedgerInterfaceMockRecorder) FindEligibleParents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEligibleParents", reflect.TypeOf((*MockLedgerInterface)(nil).FindEligibleParents))
}

// GetBySymbol mocks base method
func (m *MockLedgerInterface) GetBySymbol(arg0 string) (*database.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySymbol", arg0)
	ret0, _ := ret[0].(*database.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySymbol indicates an expected call of GetBySymbol
func (mr *MockLedgerInterfaceMockRecorder) GetBySymbol(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySymbol", reflect.TypeOf((*MockLedgerInterface)(nil).GetBySymbol), arg0)
}

// GetChildrenBySymbol mocks base method
func (m *MockLedgerInterface) GetChildrenBySymbol(arg0 string) (*database.Children, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChildrenBySymbol", arg0)
	ret0, _ := ret[0].(*database.Children)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChildrenBySymbol indicates an expected call of GetChildrenBySymbol
func (mr *MockLedgerInterfaceMockRecorder) GetChildrenBySymbol(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChildrenBySymbol", reflect.TypeOf((*MockLedgerInterface)(nil).GetChildrenBySymbol), arg0)
}

// GetMostRecentlyUsed mocks base method
func (m *MockLedgerInterface) GetMostRecentlyUsed(arg0 int) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMostRecentlyUsed", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetMostRecentlyUsed indicates an expected call of GetMostRecentlyUsed
func (mr *MockLedgerInterfaceMockRecorder) GetMostRecentlyUsed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMostRecentlyUsed", reflect.TypeOf((*MockLedgerInterface)(nil).GetMostRecentlyUsed), arg0)
}

// HandleSuccessfulQuery mocks base method
func (m *MockLedgerInterface) HandleSuccessfulQuery(arg0 *database.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleSuccessfulQuery", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleSuccessfulQuery indicates an expected call of HandleSuccessfulQuery
func (mr *MockLedgerInterfaceMockRecorder) HandleSuccessfulQuery(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSuccessfulQuery", reflect.TypeOf((*MockLedgerInterface)(nil).HandleSuccessfulQuery), arg0)
}

// IsStronglyPreferred mocks base method
func (m *MockLedgerInterface) IsStronglyPreferred(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsStronglyPreferred", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsStronglyPreferred indicates an expected call of IsStronglyPreferred
func (mr *MockLedgerInterfaceMockRecorder) IsStronglyPreferred(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStronglyPreferred", reflect.TypeOf((*MockLedgerInterface)(nil).IsStronglyPreferred), arg0)
}

// LoadContract mocks base method
func (m *MockLedgerInterface) LoadContract(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadContract", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadContract indicates an expected call of LoadContract
func (mr *MockLedgerInterfaceMockRecorder) LoadContract(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadContract", reflect.TypeOf((*MockLedgerInterface)(nil).LoadContract), arg0)
}

// NumContracts mocks base method
func (m *MockLedgerInterface) NumContracts() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumContracts")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// NumContracts indicates an expected call of NumContracts
func (mr *MockLedgerInterfaceMockRecorder) NumContracts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumContracts", reflect.TypeOf((*MockLedgerInterface)(nil).NumContracts))
}

// NumTransactions mocks base method
func (m *MockLedgerInterface) NumTransactions() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumTransactions")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// NumTransactions indicates an expected call of NumTransactions
func (mr *MockLedgerInterfaceMockRecorder) NumTransactions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumTransactions", reflect.TypeOf((*MockLedgerInterface)(nil).NumTransactions))
}

// PaginateContracts mocks base method
func (m *MockLedgerInterface) PaginateContracts(arg0, arg1 uint64) []*Contract {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaginateContracts", arg0, arg1)
	ret0, _ := ret[0].([]*Contract)
	return ret0
}

// PaginateContracts indicates an expected call of PaginateContracts
func (mr *MockLedgerInterfaceMockRecorder) PaginateContracts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaginateContracts", reflect.TypeOf((*MockLedgerInterface)(nil).PaginateContracts), arg0, arg1)
}

// PaginateTransactions mocks base method
func (m *MockLedgerInterface) PaginateTransactions(arg0, arg1 uint64) []*database.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaginateTransactions", arg0, arg1)
	ret0, _ := ret[0].([]*database.Transaction)
	return ret0
}

// PaginateTransactions indicates an expected call of PaginateTransactions
func (mr *MockLedgerInterfaceMockRecorder) PaginateTransactions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaginateTransactions", reflect.TypeOf((*MockLedgerInterface)(nil).PaginateTransactions), arg0, arg1)
}

// QueueForAcceptance mocks base method
func (m *MockLedgerInterface) QueueForAcceptance(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueForAcceptance", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueForAcceptance indicates an expected call of QueueForAcceptance
func (mr *MockLedgerInterfaceMockRecorder) QueueForAcceptance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueForAcceptance", reflect.TypeOf((*MockLedgerInterface)(nil).QueueForAcceptance), arg0)
}

// RespondToQuery mocks base method
func (m *MockLedgerInterface) RespondToQuery(arg0 *wire.Transaction) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RespondToQuery", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RespondToQuery indicates an expected call of RespondToQuery
func (mr *MockLedgerInterfaceMockRecorder) RespondToQuery(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RespondToQuery", reflect.TypeOf((*MockLedgerInterface)(nil).RespondToQuery), arg0)
}

// Snapshot mocks base method
func (m *MockLedgerInterface) Snapshot() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Snapshot indicates an expected call of Snapshot
func (mr *MockLedgerInterfaceMockRecorder) Snapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockLedgerInterface)(nil).Snapshot))
}

// TransactionExists mocks base method
func (m *MockLedgerInterface) TransactionExists(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionExists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// TransactionExists indicates an expected call of TransactionExists
func (mr *MockLedgerInterfaceMockRecorder) TransactionExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionExists", reflect.TypeOf((*MockLedgerInterface)(nil).TransactionExists), arg0)
}

// WasAccepted mocks base method
func (m *MockLedgerInterface) WasAccepted(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WasAccepted", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// WasAccepted indicates an expected call of WasAccepted
func (mr *MockLedgerInterfaceMockRecorder) WasAccepted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WasAccepted", reflect.TypeOf((*MockLedgerInterface)(nil).WasAccepted), arg0)
}
