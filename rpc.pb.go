// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rpc.proto

package wavelet

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryRequest struct {
	BlockIndex   uint64 `protobuf:"varint,1,opt,name=block_index,json=blockIndex,proto3" json:"block_index,omitempty"`
	CacheBlockId []byte `protobuf:"bytes,2,opt,name=cache_block_id,json=cacheBlockId,proto3" json:"cache_block_id,omitempty"`
}

func (m *QueryRequest) Reset()         { *m = QueryRequest{} }
func (m *QueryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()    {}
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{0}
}
func (m *QueryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequest.Merge(m, src)
}
func (m *QueryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequest proto.InternalMessageInfo

func (m *QueryRequest) GetBlockIndex() uint64 {
	if m != nil {
		return m.BlockIndex
	}
	return 0
}

func (m *QueryRequest) GetCacheBlockId() []byte {
	if m != nil {
		return m.CacheBlockId
	}
	return nil
}

type QueryResponse struct {
	Block      []byte `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	CacheValid bool   `protobuf:"varint,2,opt,name=cache_valid,json=cacheValid,proto3" json:"cache_valid,omitempty"`
}

func (m *QueryResponse) Reset()         { *m = QueryResponse{} }
func (m *QueryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryResponse) ProtoMessage()    {}
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{1}
}
func (m *QueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResponse.Merge(m, src)
}
func (m *QueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResponse proto.InternalMessageInfo

func (m *QueryResponse) GetBlock() []byte {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *QueryResponse) GetCacheValid() bool {
	if m != nil {
		return m.CacheValid
	}
	return false
}

type OutOfSyncRequest struct {
	BlockIndex uint64 `protobuf:"varint,1,opt,name=block_index,json=blockIndex,proto3" json:"block_index,omitempty"`
}

func (m *OutOfSyncRequest) Reset()         { *m = OutOfSyncRequest{} }
func (m *OutOfSyncRequest) String() string { return proto.CompactTextString(m) }
func (*OutOfSyncRequest) ProtoMessage()    {}
func (*OutOfSyncRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{2}
}
func (m *OutOfSyncRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutOfSyncRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutOfSyncRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutOfSyncRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutOfSyncRequest.Merge(m, src)
}
func (m *OutOfSyncRequest) XXX_Size() int {
	return m.Size()
}
func (m *OutOfSyncRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OutOfSyncRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OutOfSyncRequest proto.InternalMessageInfo

func (m *OutOfSyncRequest) GetBlockIndex() uint64 {
	if m != nil {
		return m.BlockIndex
	}
	return 0
}

type OutOfSyncResponse struct {
	OutOfSync bool `protobuf:"varint,1,opt,name=out_of_sync,json=outOfSync,proto3" json:"out_of_sync,omitempty"`
}

func (m *OutOfSyncResponse) Reset()         { *m = OutOfSyncResponse{} }
func (m *OutOfSyncResponse) String() string { return proto.CompactTextString(m) }
func (*OutOfSyncResponse) ProtoMessage()    {}
func (*OutOfSyncResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{3}
}
func (m *OutOfSyncResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutOfSyncResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutOfSyncResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutOfSyncResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutOfSyncResponse.Merge(m, src)
}
func (m *OutOfSyncResponse) XXX_Size() int {
	return m.Size()
}
func (m *OutOfSyncResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OutOfSyncResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OutOfSyncResponse proto.InternalMessageInfo

func (m *OutOfSyncResponse) GetOutOfSync() bool {
	if m != nil {
		return m.OutOfSync
	}
	return false
}

type SyncInfo struct {
	Block     []byte   `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	Checksums [][]byte `protobuf:"bytes,2,rep,name=checksums,proto3" json:"checksums,omitempty"`
}

func (m *SyncInfo) Reset()         { *m = SyncInfo{} }
func (m *SyncInfo) String() string { return proto.CompactTextString(m) }
func (*SyncInfo) ProtoMessage()    {}
func (*SyncInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{4}
}
func (m *SyncInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncInfo.Merge(m, src)
}
func (m *SyncInfo) XXX_Size() int {
	return m.Size()
}
func (m *SyncInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SyncInfo proto.InternalMessageInfo

func (m *SyncInfo) GetBlock() []byte {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *SyncInfo) GetChecksums() [][]byte {
	if m != nil {
		return m.Checksums
	}
	return nil
}

type SyncRequest struct {
	// Types that are valid to be assigned to Data:
	//	*SyncRequest_BlockId
	//	*SyncRequest_Checksum
	Data isSyncRequest_Data `protobuf_oneof:"Data"`
}

func (m *SyncRequest) Reset()         { *m = SyncRequest{} }
func (m *SyncRequest) String() string { return proto.CompactTextString(m) }
func (*SyncRequest) ProtoMessage()    {}
func (*SyncRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{5}
}
func (m *SyncRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncRequest.Merge(m, src)
}
func (m *SyncRequest) XXX_Size() int {
	return m.Size()
}
func (m *SyncRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SyncRequest proto.InternalMessageInfo

type isSyncRequest_Data interface {
	isSyncRequest_Data()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SyncRequest_BlockId struct {
	BlockId uint64 `protobuf:"varint,1,opt,name=block_id,json=blockId,proto3,oneof" json:"block_id,omitempty"`
}
type SyncRequest_Checksum struct {
	Checksum []byte `protobuf:"bytes,2,opt,name=checksum,proto3,oneof" json:"checksum,omitempty"`
}

func (*SyncRequest_BlockId) isSyncRequest_Data()  {}
func (*SyncRequest_Checksum) isSyncRequest_Data() {}

func (m *SyncRequest) GetData() isSyncRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SyncRequest) GetBlockId() uint64 {
	if x, ok := m.GetData().(*SyncRequest_BlockId); ok {
		return x.BlockId
	}
	return 0
}

func (m *SyncRequest) GetChecksum() []byte {
	if x, ok := m.GetData().(*SyncRequest_Checksum); ok {
		return x.Checksum
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SyncRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SyncRequest_BlockId)(nil),
		(*SyncRequest_Checksum)(nil),
	}
}

type SyncResponse struct {
	// Types that are valid to be assigned to Data:
	//	*SyncResponse_Header
	//	*SyncResponse_Chunk
	Data isSyncResponse_Data `protobuf_oneof:"Data"`
}

func (m *SyncResponse) Reset()         { *m = SyncResponse{} }
func (m *SyncResponse) String() string { return proto.CompactTextString(m) }
func (*SyncResponse) ProtoMessage()    {}
func (*SyncResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{6}
}
func (m *SyncResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncResponse.Merge(m, src)
}
func (m *SyncResponse) XXX_Size() int {
	return m.Size()
}
func (m *SyncResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SyncResponse proto.InternalMessageInfo

type isSyncResponse_Data interface {
	isSyncResponse_Data()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SyncResponse_Header struct {
	Header *SyncInfo `protobuf:"bytes,1,opt,name=header,proto3,oneof" json:"header,omitempty"`
}
type SyncResponse_Chunk struct {
	Chunk []byte `protobuf:"bytes,2,opt,name=chunk,proto3,oneof" json:"chunk,omitempty"`
}

func (*SyncResponse_Header) isSyncResponse_Data() {}
func (*SyncResponse_Chunk) isSyncResponse_Data()  {}

func (m *SyncResponse) GetData() isSyncResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SyncResponse) GetHeader() *SyncInfo {
	if x, ok := m.GetData().(*SyncResponse_Header); ok {
		return x.Header
	}
	return nil
}

func (m *SyncResponse) GetChunk() []byte {
	if x, ok := m.GetData().(*SyncResponse_Chunk); ok {
		return x.Chunk
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SyncResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SyncResponse_Header)(nil),
		(*SyncResponse_Chunk)(nil),
	}
}

type GossipRequest struct {
	Transactions [][]byte `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (m *GossipRequest) Reset()         { *m = GossipRequest{} }
func (m *GossipRequest) String() string { return proto.CompactTextString(m) }
func (*GossipRequest) ProtoMessage()    {}
func (*GossipRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{7}
}
func (m *GossipRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GossipRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GossipRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GossipRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GossipRequest.Merge(m, src)
}
func (m *GossipRequest) XXX_Size() int {
	return m.Size()
}
func (m *GossipRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GossipRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GossipRequest proto.InternalMessageInfo

func (m *GossipRequest) GetTransactions() [][]byte {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type GossipResponse struct {
}

func (m *GossipResponse) Reset()         { *m = GossipResponse{} }
func (m *GossipResponse) String() string { return proto.CompactTextString(m) }
func (*GossipResponse) ProtoMessage()    {}
func (*GossipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{8}
}
func (m *GossipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GossipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GossipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GossipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GossipResponse.Merge(m, src)
}
func (m *GossipResponse) XXX_Size() int {
	return m.Size()
}
func (m *GossipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GossipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GossipResponse proto.InternalMessageInfo

type TransactionsSyncRequest struct {
	// Types that are valid to be assigned to Data:
	//	*TransactionsSyncRequest_Filter
	//	*TransactionsSyncRequest_ChunkSize
	Data isTransactionsSyncRequest_Data `protobuf_oneof:"Data"`
}

func (m *TransactionsSyncRequest) Reset()         { *m = TransactionsSyncRequest{} }
func (m *TransactionsSyncRequest) String() string { return proto.CompactTextString(m) }
func (*TransactionsSyncRequest) ProtoMessage()    {}
func (*TransactionsSyncRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{9}
}
func (m *TransactionsSyncRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionsSyncRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionsSyncRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionsSyncRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionsSyncRequest.Merge(m, src)
}
func (m *TransactionsSyncRequest) XXX_Size() int {
	return m.Size()
}
func (m *TransactionsSyncRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionsSyncRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionsSyncRequest proto.InternalMessageInfo

type isTransactionsSyncRequest_Data interface {
	isTransactionsSyncRequest_Data()
	MarshalTo([]byte) (int, error)
	Size() int
}

type TransactionsSyncRequest_Filter struct {
	Filter []byte `protobuf:"bytes,1,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
}
type TransactionsSyncRequest_ChunkSize struct {
	ChunkSize uint64 `protobuf:"varint,2,opt,name=chunk_size,json=chunkSize,proto3,oneof" json:"chunk_size,omitempty"`
}

func (*TransactionsSyncRequest_Filter) isTransactionsSyncRequest_Data()    {}
func (*TransactionsSyncRequest_ChunkSize) isTransactionsSyncRequest_Data() {}

func (m *TransactionsSyncRequest) GetData() isTransactionsSyncRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TransactionsSyncRequest) GetFilter() []byte {
	if x, ok := m.GetData().(*TransactionsSyncRequest_Filter); ok {
		return x.Filter
	}
	return nil
}

func (m *TransactionsSyncRequest) GetChunkSize() uint64 {
	if x, ok := m.GetData().(*TransactionsSyncRequest_ChunkSize); ok {
		return x.ChunkSize
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TransactionsSyncRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TransactionsSyncRequest_Filter)(nil),
		(*TransactionsSyncRequest_ChunkSize)(nil),
	}
}

type TransactionsSyncPart struct {
	Transactions [][]byte `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (m *TransactionsSyncPart) Reset()         { *m = TransactionsSyncPart{} }
func (m *TransactionsSyncPart) String() string { return proto.CompactTextString(m) }
func (*TransactionsSyncPart) ProtoMessage()    {}
func (*TransactionsSyncPart) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{10}
}
func (m *TransactionsSyncPart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionsSyncPart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionsSyncPart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionsSyncPart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionsSyncPart.Merge(m, src)
}
func (m *TransactionsSyncPart) XXX_Size() int {
	return m.Size()
}
func (m *TransactionsSyncPart) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionsSyncPart.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionsSyncPart proto.InternalMessageInfo

func (m *TransactionsSyncPart) GetTransactions() [][]byte {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type TransactionsSyncResponse struct {
	// Types that are valid to be assigned to Data:
	//	*TransactionsSyncResponse_TransactionsNum
	//	*TransactionsSyncResponse_Transactions
	Data isTransactionsSyncResponse_Data `protobuf_oneof:"Data"`
}

func (m *TransactionsSyncResponse) Reset()         { *m = TransactionsSyncResponse{} }
func (m *TransactionsSyncResponse) String() string { return proto.CompactTextString(m) }
func (*TransactionsSyncResponse) ProtoMessage()    {}
func (*TransactionsSyncResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{11}
}
func (m *TransactionsSyncResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionsSyncResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionsSyncResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionsSyncResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionsSyncResponse.Merge(m, src)
}
func (m *TransactionsSyncResponse) XXX_Size() int {
	return m.Size()
}
func (m *TransactionsSyncResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionsSyncResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionsSyncResponse proto.InternalMessageInfo

type isTransactionsSyncResponse_Data interface {
	isTransactionsSyncResponse_Data()
	MarshalTo([]byte) (int, error)
	Size() int
}

type TransactionsSyncResponse_TransactionsNum struct {
	TransactionsNum uint64 `protobuf:"varint,1,opt,name=transactions_num,json=transactionsNum,proto3,oneof" json:"transactions_num,omitempty"`
}
type TransactionsSyncResponse_Transactions struct {
	Transactions *TransactionsSyncPart `protobuf:"bytes,2,opt,name=transactions,proto3,oneof" json:"transactions,omitempty"`
}

func (*TransactionsSyncResponse_TransactionsNum) isTransactionsSyncResponse_Data() {}
func (*TransactionsSyncResponse_Transactions) isTransactionsSyncResponse_Data()    {}

func (m *TransactionsSyncResponse) GetData() isTransactionsSyncResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TransactionsSyncResponse) GetTransactionsNum() uint64 {
	if x, ok := m.GetData().(*TransactionsSyncResponse_TransactionsNum); ok {
		return x.TransactionsNum
	}
	return 0
}

func (m *TransactionsSyncResponse) GetTransactions() *TransactionsSyncPart {
	if x, ok := m.GetData().(*TransactionsSyncResponse_Transactions); ok {
		return x.Transactions
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TransactionsSyncResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TransactionsSyncResponse_TransactionsNum)(nil),
		(*TransactionsSyncResponse_Transactions)(nil),
	}
}

type TransactionPullRequest struct {
	TransactionIds [][]byte `protobuf:"bytes,1,rep,name=transaction_ids,json=transactionIds,proto3" json:"transaction_ids,omitempty"`
}

func (m *TransactionPullRequest) Reset()         { *m = TransactionPullRequest{} }
func (m *TransactionPullRequest) String() string { return proto.CompactTextString(m) }
func (*TransactionPullRequest) ProtoMessage()    {}
func (*TransactionPullRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{12}
}
func (m *TransactionPullRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionPullRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionPullRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionPullRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionPullRequest.Merge(m, src)
}
func (m *TransactionPullRequest) XXX_Size() int {
	return m.Size()
}
func (m *TransactionPullRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionPullRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionPullRequest proto.InternalMessageInfo

func (m *TransactionPullRequest) GetTransactionIds() [][]byte {
	if m != nil {
		return m.TransactionIds
	}
	return nil
}

type TransactionPullResponse struct {
	Transactions [][]byte `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (m *TransactionPullResponse) Reset()         { *m = TransactionPullResponse{} }
func (m *TransactionPullResponse) String() string { return proto.CompactTextString(m) }
func (*TransactionPullResponse) ProtoMessage()    {}
func (*TransactionPullResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{13}
}
func (m *TransactionPullResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionPullResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionPullResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionPullResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionPullResponse.Merge(m, src)
}
func (m *TransactionPullResponse) XXX_Size() int {
	return m.Size()
}
func (m *TransactionPullResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionPullResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionPullResponse proto.InternalMessageInfo

func (m *TransactionPullResponse) GetTransactions() [][]byte {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryRequest)(nil), "wavelet.QueryRequest")
	proto.RegisterType((*QueryResponse)(nil), "wavelet.QueryResponse")
	proto.RegisterType((*OutOfSyncRequest)(nil), "wavelet.OutOfSyncRequest")
	proto.RegisterType((*OutOfSyncResponse)(nil), "wavelet.OutOfSyncResponse")
	proto.RegisterType((*SyncInfo)(nil), "wavelet.SyncInfo")
	proto.RegisterType((*SyncRequest)(nil), "wavelet.SyncRequest")
	proto.RegisterType((*SyncResponse)(nil), "wavelet.SyncResponse")
	proto.RegisterType((*GossipRequest)(nil), "wavelet.GossipRequest")
	proto.RegisterType((*GossipResponse)(nil), "wavelet.GossipResponse")
	proto.RegisterType((*TransactionsSyncRequest)(nil), "wavelet.TransactionsSyncRequest")
	proto.RegisterType((*TransactionsSyncPart)(nil), "wavelet.TransactionsSyncPart")
	proto.RegisterType((*TransactionsSyncResponse)(nil), "wavelet.TransactionsSyncResponse")
	proto.RegisterType((*TransactionPullRequest)(nil), "wavelet.TransactionPullRequest")
	proto.RegisterType((*TransactionPullResponse)(nil), "wavelet.TransactionPullResponse")
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor_77a6da22d6a3feb1) }

var fileDescriptor_77a6da22d6a3feb1 = []byte{
	// 633 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0x5f, 0x6f, 0xd2, 0x50,
	0x18, 0xc6, 0xdb, 0xfd, 0x61, 0xf0, 0xd2, 0x21, 0x3b, 0x61, 0xac, 0xe2, 0x2c, 0xd8, 0x98, 0x48,
	0x62, 0x42, 0xcc, 0xb8, 0x51, 0x93, 0x99, 0xc8, 0x8c, 0xc2, 0x8d, 0xc3, 0x4e, 0xdd, 0x85, 0x9a,
	0xa6, 0x6b, 0x0f, 0xa1, 0xa1, 0xb4, 0xd8, 0xd3, 0x4e, 0xd9, 0xa7, 0xf0, 0xc2, 0x0f, 0xe4, 0xa5,
	0x97, 0xbb, 0xf4, 0xd2, 0xc0, 0x17, 0x31, 0x3d, 0x6d, 0xcf, 0x4e, 0x19, 0x18, 0xae, 0x48, 0x1f,
	0xde, 0xf7, 0x39, 0xbf, 0xf7, 0x79, 0x7b, 0x0a, 0x05, 0x7f, 0x62, 0xb6, 0x26, 0xbe, 0x17, 0x78,
	0x68, 0xe7, 0x9b, 0x71, 0x89, 0x1d, 0x1c, 0xa8, 0x1f, 0x40, 0x7a, 0x17, 0x62, 0x7f, 0xaa, 0xe1,
	0xaf, 0x21, 0x26, 0x01, 0xaa, 0x43, 0xf1, 0xc2, 0xf1, 0xcc, 0x91, 0x6e, 0xbb, 0x16, 0xfe, 0x2e,
	0x8b, 0x0d, 0xb1, 0xb9, 0xa5, 0x01, 0x95, 0x7a, 0x91, 0x82, 0x1e, 0x42, 0xc9, 0x34, 0xcc, 0x21,
	0xd6, 0x93, 0x32, 0x4b, 0xde, 0x68, 0x88, 0x4d, 0x49, 0x93, 0xa8, 0xda, 0xa1, 0x85, 0x96, 0xfa,
	0x1a, 0x76, 0x13, 0x5b, 0x32, 0xf1, 0x5c, 0x82, 0x51, 0x05, 0xb6, 0x69, 0x03, 0x75, 0x94, 0xb4,
	0xf8, 0x21, 0x3a, 0x2d, 0x36, 0xbb, 0x34, 0x9c, 0xc4, 0x29, 0xaf, 0x01, 0x95, 0x3e, 0x46, 0x8a,
	0xda, 0x86, 0xf2, 0x69, 0x18, 0x9c, 0x0e, 0xce, 0xa6, 0xae, 0xb9, 0x2e, 0xa2, 0xda, 0x86, 0x3d,
	0xae, 0x29, 0x01, 0x50, 0xa0, 0xe8, 0x85, 0x81, 0xee, 0x0d, 0x74, 0x32, 0x75, 0x4d, 0xda, 0x95,
	0xd7, 0x0a, 0x5e, 0x5a, 0xa7, 0xbe, 0x80, 0x7c, 0xf4, 0xdb, 0x73, 0x07, 0xde, 0x0a, 0xd8, 0x43,
	0x28, 0x98, 0x43, 0x6c, 0x8e, 0x48, 0x38, 0x26, 0xf2, 0x46, 0x63, 0xb3, 0x29, 0x69, 0x37, 0x82,
	0xda, 0x87, 0x22, 0x0f, 0x79, 0x0f, 0xf2, 0x2c, 0x20, 0x4a, 0xd8, 0x15, 0xb4, 0x9d, 0x98, 0xd1,
	0x42, 0x87, 0x90, 0x4f, 0x1b, 0xe3, 0xf4, 0xba, 0x82, 0xc6, 0x94, 0x4e, 0x0e, 0xb6, 0x5e, 0x19,
	0x81, 0xa1, 0x7e, 0x02, 0x29, 0x33, 0xc1, 0x63, 0xc8, 0x0d, 0xb1, 0x61, 0x61, 0x9f, 0x1a, 0x16,
	0x8f, 0xf6, 0x5a, 0xc9, 0x12, 0x5b, 0x29, 0x78, 0x57, 0xd0, 0x92, 0x12, 0x54, 0x85, 0x6d, 0x73,
	0x18, 0xba, 0x23, 0xe6, 0x1f, 0x3f, 0x32, 0xf3, 0x36, 0xec, 0xbe, 0xf1, 0x08, 0xb1, 0x27, 0x29,
	0xb0, 0x0a, 0x52, 0xe0, 0x1b, 0x2e, 0x31, 0xcc, 0xc0, 0xf6, 0x5c, 0x22, 0x8b, 0x74, 0xc0, 0x8c,
	0xa6, 0x96, 0xa1, 0x94, 0x36, 0xc5, 0x4c, 0xea, 0x67, 0x38, 0x78, 0xcf, 0x55, 0xf0, 0x09, 0xc8,
	0x90, 0x1b, 0xd8, 0x4e, 0x90, 0xe0, 0x46, 0x08, 0xc9, 0x33, 0xaa, 0x03, 0x50, 0x18, 0x9d, 0xd8,
	0x57, 0x98, 0x02, 0x46, 0xe9, 0x14, 0xa8, 0x76, 0x66, 0x5f, 0x61, 0x06, 0xf9, 0x1c, 0x2a, 0x8b,
	0xee, 0x7d, 0xc3, 0x5f, 0x8f, 0xf5, 0xa7, 0x08, 0xf2, 0x6d, 0x34, 0x16, 0x65, 0x99, 0x2f, 0xd6,
	0xdd, 0x70, 0xcc, 0xb6, 0x74, 0x87, 0xff, 0xe7, 0x6d, 0x38, 0x46, 0x27, 0x0b, 0xa7, 0x6d, 0xd0,
	0xf4, 0xef, 0xb3, 0xf4, 0x97, 0x21, 0x76, 0x85, 0x2c, 0x0e, 0x1b, 0xe9, 0x25, 0x54, 0xb9, 0xfa,
	0x7e, 0xe8, 0x38, 0x69, 0x5e, 0x8f, 0x80, 0x3f, 0x59, 0xb7, 0xad, 0x74, 0xae, 0x12, 0x27, 0xf7,
	0x2c, 0xa2, 0x1e, 0x67, 0x32, 0x8f, 0x2d, 0x92, 0xb9, 0xd6, 0x08, 0xe6, 0xe8, 0xd7, 0x26, 0xec,
	0x9c, 0xc7, 0xe8, 0xe8, 0x18, 0x72, 0xf1, 0x42, 0x51, 0x95, 0x8d, 0x93, 0x79, 0x2d, 0x6a, 0x07,
	0xb7, 0xf4, 0x64, 0xf3, 0x42, 0x53, 0x44, 0x4f, 0x61, 0x9b, 0xde, 0x72, 0xb4, 0xcf, 0xaa, 0xf8,
	0x8f, 0x49, 0xad, 0xba, 0x28, 0xa7, 0xbd, 0xa8, 0x07, 0xa5, 0x93, 0xe8, 0x7d, 0x67, 0xf7, 0x14,
	0xdd, 0x65, 0xb5, 0x8b, 0x17, 0xbe, 0x56, 0x5b, 0xf6, 0x17, 0xb3, 0x7a, 0x06, 0x5b, 0xd4, 0xa0,
	0x92, 0xb9, 0x0e, 0x69, 0xef, 0xfe, 0x82, 0x7a, 0x43, 0xff, 0x44, 0x44, 0xe7, 0x50, 0x8e, 0xe2,
	0xe3, 0x17, 0x88, 0xea, 0xcb, 0xf6, 0xca, 0xed, 0xa9, 0xd6, 0x58, 0x5d, 0xc0, 0x98, 0xbe, 0x40,
	0x39, 0x3a, 0x2e, 0x63, 0xdc, 0x58, 0xf9, 0xc2, 0xa4, 0xce, 0x0f, 0xfe, 0x53, 0xc1, 0x73, 0x77,
	0xe4, 0xdf, 0x33, 0x45, 0xbc, 0x9e, 0x29, 0xe2, 0xdf, 0x99, 0x22, 0xfe, 0x98, 0x2b, 0xc2, 0xf5,
	0x5c, 0x11, 0xfe, 0xcc, 0x15, 0xe1, 0x22, 0x47, 0x3f, 0xef, 0xed, 0x7f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xb1, 0x05, 0x0f, 0x23, 0xeb, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WaveletClient is the client API for Wavelet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WaveletClient interface {
	Gossip(ctx context.Context, opts ...grpc.CallOption) (Wavelet_GossipClient, error)
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	CheckOutOfSync(ctx context.Context, in *OutOfSyncRequest, opts ...grpc.CallOption) (*OutOfSyncResponse, error)
	Sync(ctx context.Context, opts ...grpc.CallOption) (Wavelet_SyncClient, error)
	PullTransactions(ctx context.Context, in *TransactionPullRequest, opts ...grpc.CallOption) (*TransactionPullResponse, error)
	SyncTransactions(ctx context.Context, opts ...grpc.CallOption) (Wavelet_SyncTransactionsClient, error)
}

type waveletClient struct {
	cc *grpc.ClientConn
}

func NewWaveletClient(cc *grpc.ClientConn) WaveletClient {
	return &waveletClient{cc}
}

func (c *waveletClient) Gossip(ctx context.Context, opts ...grpc.CallOption) (Wavelet_GossipClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Wavelet_serviceDesc.Streams[0], "/wavelet.Wavelet/Gossip", opts...)
	if err != nil {
		return nil, err
	}
	x := &waveletGossipClient{stream}
	return x, nil
}

type Wavelet_GossipClient interface {
	Send(*GossipRequest) error
	CloseAndRecv() (*GossipResponse, error)
	grpc.ClientStream
}

type waveletGossipClient struct {
	grpc.ClientStream
}

func (x *waveletGossipClient) Send(m *GossipRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *waveletGossipClient) CloseAndRecv() (*GossipResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(GossipResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *waveletClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/wavelet.Wavelet/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waveletClient) CheckOutOfSync(ctx context.Context, in *OutOfSyncRequest, opts ...grpc.CallOption) (*OutOfSyncResponse, error) {
	out := new(OutOfSyncResponse)
	err := c.cc.Invoke(ctx, "/wavelet.Wavelet/CheckOutOfSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waveletClient) Sync(ctx context.Context, opts ...grpc.CallOption) (Wavelet_SyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Wavelet_serviceDesc.Streams[1], "/wavelet.Wavelet/Sync", opts...)
	if err != nil {
		return nil, err
	}
	x := &waveletSyncClient{stream}
	return x, nil
}

type Wavelet_SyncClient interface {
	Send(*SyncRequest) error
	Recv() (*SyncResponse, error)
	grpc.ClientStream
}

type waveletSyncClient struct {
	grpc.ClientStream
}

func (x *waveletSyncClient) Send(m *SyncRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *waveletSyncClient) Recv() (*SyncResponse, error) {
	m := new(SyncResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *waveletClient) PullTransactions(ctx context.Context, in *TransactionPullRequest, opts ...grpc.CallOption) (*TransactionPullResponse, error) {
	out := new(TransactionPullResponse)
	err := c.cc.Invoke(ctx, "/wavelet.Wavelet/PullTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waveletClient) SyncTransactions(ctx context.Context, opts ...grpc.CallOption) (Wavelet_SyncTransactionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Wavelet_serviceDesc.Streams[2], "/wavelet.Wavelet/SyncTransactions", opts...)
	if err != nil {
		return nil, err
	}
	x := &waveletSyncTransactionsClient{stream}
	return x, nil
}

type Wavelet_SyncTransactionsClient interface {
	Send(*TransactionsSyncRequest) error
	Recv() (*TransactionsSyncResponse, error)
	grpc.ClientStream
}

type waveletSyncTransactionsClient struct {
	grpc.ClientStream
}

func (x *waveletSyncTransactionsClient) Send(m *TransactionsSyncRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *waveletSyncTransactionsClient) Recv() (*TransactionsSyncResponse, error) {
	m := new(TransactionsSyncResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WaveletServer is the server API for Wavelet service.
type WaveletServer interface {
	Gossip(Wavelet_GossipServer) error
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	CheckOutOfSync(context.Context, *OutOfSyncRequest) (*OutOfSyncResponse, error)
	Sync(Wavelet_SyncServer) error
	PullTransactions(context.Context, *TransactionPullRequest) (*TransactionPullResponse, error)
	SyncTransactions(Wavelet_SyncTransactionsServer) error
}

// UnimplementedWaveletServer can be embedded to have forward compatible implementations.
type UnimplementedWaveletServer struct {
}

func (*UnimplementedWaveletServer) Gossip(srv Wavelet_GossipServer) error {
	return status.Errorf(codes.Unimplemented, "method Gossip not implemented")
}
func (*UnimplementedWaveletServer) Query(ctx context.Context, req *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (*UnimplementedWaveletServer) CheckOutOfSync(ctx context.Context, req *OutOfSyncRequest) (*OutOfSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckOutOfSync not implemented")
}
func (*UnimplementedWaveletServer) Sync(srv Wavelet_SyncServer) error {
	return status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (*UnimplementedWaveletServer) PullTransactions(ctx context.Context, req *TransactionPullRequest) (*TransactionPullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullTransactions not implemented")
}
func (*UnimplementedWaveletServer) SyncTransactions(srv Wavelet_SyncTransactionsServer) error {
	return status.Errorf(codes.Unimplemented, "method SyncTransactions not implemented")
}

func RegisterWaveletServer(s *grpc.Server, srv WaveletServer) {
	s.RegisterService(&_Wavelet_serviceDesc, srv)
}

func _Wavelet_Gossip_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WaveletServer).Gossip(&waveletGossipServer{stream})
}

type Wavelet_GossipServer interface {
	SendAndClose(*GossipResponse) error
	Recv() (*GossipRequest, error)
	grpc.ServerStream
}

type waveletGossipServer struct {
	grpc.ServerStream
}

func (x *waveletGossipServer) SendAndClose(m *GossipResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *waveletGossipServer) Recv() (*GossipRequest, error) {
	m := new(GossipRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Wavelet_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaveletServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wavelet.Wavelet/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaveletServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wavelet_CheckOutOfSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutOfSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaveletServer).CheckOutOfSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wavelet.Wavelet/CheckOutOfSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaveletServer).CheckOutOfSync(ctx, req.(*OutOfSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wavelet_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WaveletServer).Sync(&waveletSyncServer{stream})
}

type Wavelet_SyncServer interface {
	Send(*SyncResponse) error
	Recv() (*SyncRequest, error)
	grpc.ServerStream
}

type waveletSyncServer struct {
	grpc.ServerStream
}

func (x *waveletSyncServer) Send(m *SyncResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *waveletSyncServer) Recv() (*SyncRequest, error) {
	m := new(SyncRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Wavelet_PullTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionPullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaveletServer).PullTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wavelet.Wavelet/PullTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaveletServer).PullTransactions(ctx, req.(*TransactionPullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wavelet_SyncTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WaveletServer).SyncTransactions(&waveletSyncTransactionsServer{stream})
}

type Wavelet_SyncTransactionsServer interface {
	Send(*TransactionsSyncResponse) error
	Recv() (*TransactionsSyncRequest, error)
	grpc.ServerStream
}

type waveletSyncTransactionsServer struct {
	grpc.ServerStream
}

func (x *waveletSyncTransactionsServer) Send(m *TransactionsSyncResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *waveletSyncTransactionsServer) Recv() (*TransactionsSyncRequest, error) {
	m := new(TransactionsSyncRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Wavelet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wavelet.Wavelet",
	HandlerType: (*WaveletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _Wavelet_Query_Handler,
		},
		{
			MethodName: "CheckOutOfSync",
			Handler:    _Wavelet_CheckOutOfSync_Handler,
		},
		{
			MethodName: "PullTransactions",
			Handler:    _Wavelet_PullTransactions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Gossip",
			Handler:       _Wavelet_Gossip_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Sync",
			Handler:       _Wavelet_Sync_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SyncTransactions",
			Handler:       _Wavelet_SyncTransactions_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

func (m *QueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CacheBlockId) > 0 {
		i -= len(m.CacheBlockId)
		copy(dAtA[i:], m.CacheBlockId)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.CacheBlockId)))
		i--
		dAtA[i] = 0x12
	}
	if m.BlockIndex != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.BlockIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CacheValid {
		i--
		if m.CacheValid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Block) > 0 {
		i -= len(m.Block)
		copy(dAtA[i:], m.Block)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Block)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OutOfSyncRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutOfSyncRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutOfSyncRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockIndex != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.BlockIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OutOfSyncResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutOfSyncResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutOfSyncResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OutOfSync {
		i--
		if m.OutOfSync {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SyncInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Checksums) > 0 {
		for iNdEx := len(m.Checksums) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Checksums[iNdEx])
			copy(dAtA[i:], m.Checksums[iNdEx])
			i = encodeVarintRpc(dAtA, i, uint64(len(m.Checksums[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Block) > 0 {
		i -= len(m.Block)
		copy(dAtA[i:], m.Block)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Block)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SyncRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size := m.Data.Size()
			i -= size
			if _, err := m.Data.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *SyncRequest_BlockId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncRequest_BlockId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintRpc(dAtA, i, uint64(m.BlockId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *SyncRequest_Checksum) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncRequest_Checksum) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Checksum != nil {
		i -= len(m.Checksum)
		copy(dAtA[i:], m.Checksum)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Checksum)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *SyncResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size := m.Data.Size()
			i -= size
			if _, err := m.Data.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *SyncResponse_Header) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncResponse_Header) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *SyncResponse_Chunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncResponse_Chunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Chunk != nil {
		i -= len(m.Chunk)
		copy(dAtA[i:], m.Chunk)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Chunk)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GossipRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GossipRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GossipRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Transactions) > 0 {
		for iNdEx := len(m.Transactions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Transactions[iNdEx])
			copy(dAtA[i:], m.Transactions[iNdEx])
			i = encodeVarintRpc(dAtA, i, uint64(len(m.Transactions[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GossipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GossipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GossipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TransactionsSyncRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionsSyncRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionsSyncRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size := m.Data.Size()
			i -= size
			if _, err := m.Data.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *TransactionsSyncRequest_Filter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionsSyncRequest_Filter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Filter != nil {
		i -= len(m.Filter)
		copy(dAtA[i:], m.Filter)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Filter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *TransactionsSyncRequest_ChunkSize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionsSyncRequest_ChunkSize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintRpc(dAtA, i, uint64(m.ChunkSize))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *TransactionsSyncPart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionsSyncPart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionsSyncPart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Transactions) > 0 {
		for iNdEx := len(m.Transactions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Transactions[iNdEx])
			copy(dAtA[i:], m.Transactions[iNdEx])
			i = encodeVarintRpc(dAtA, i, uint64(len(m.Transactions[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TransactionsSyncResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionsSyncResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionsSyncResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size := m.Data.Size()
			i -= size
			if _, err := m.Data.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *TransactionsSyncResponse_TransactionsNum) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionsSyncResponse_TransactionsNum) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintRpc(dAtA, i, uint64(m.TransactionsNum))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *TransactionsSyncResponse_Transactions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionsSyncResponse_Transactions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Transactions != nil {
		{
			size, err := m.Transactions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *TransactionPullRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionPullRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionPullRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TransactionIds) > 0 {
		for iNdEx := len(m.TransactionIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TransactionIds[iNdEx])
			copy(dAtA[i:], m.TransactionIds[iNdEx])
			i = encodeVarintRpc(dAtA, i, uint64(len(m.TransactionIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TransactionPullResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionPullResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionPullResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Transactions) > 0 {
		for iNdEx := len(m.Transactions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Transactions[iNdEx])
			copy(dAtA[i:], m.Transactions[iNdEx])
			i = encodeVarintRpc(dAtA, i, uint64(len(m.Transactions[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintRpc(dAtA []byte, offset int, v uint64) int {
	offset -= sovRpc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockIndex != 0 {
		n += 1 + sovRpc(uint64(m.BlockIndex))
	}
	l = len(m.CacheBlockId)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *QueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Block)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.CacheValid {
		n += 2
	}
	return n
}

func (m *OutOfSyncRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockIndex != 0 {
		n += 1 + sovRpc(uint64(m.BlockIndex))
	}
	return n
}

func (m *OutOfSyncResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OutOfSync {
		n += 2
	}
	return n
}

func (m *SyncInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Block)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if len(m.Checksums) > 0 {
		for _, b := range m.Checksums {
			l = len(b)
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	return n
}

func (m *SyncRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		n += m.Data.Size()
	}
	return n
}

func (m *SyncRequest_BlockId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovRpc(uint64(m.BlockId))
	return n
}
func (m *SyncRequest_Checksum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Checksum != nil {
		l = len(m.Checksum)
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}
func (m *SyncResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		n += m.Data.Size()
	}
	return n
}

func (m *SyncResponse_Header) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}
func (m *SyncResponse_Chunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Chunk != nil {
		l = len(m.Chunk)
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}
func (m *GossipRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Transactions) > 0 {
		for _, b := range m.Transactions {
			l = len(b)
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	return n
}

func (m *GossipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TransactionsSyncRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		n += m.Data.Size()
	}
	return n
}

func (m *TransactionsSyncRequest_Filter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Filter != nil {
		l = len(m.Filter)
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}
func (m *TransactionsSyncRequest_ChunkSize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovRpc(uint64(m.ChunkSize))
	return n
}
func (m *TransactionsSyncPart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Transactions) > 0 {
		for _, b := range m.Transactions {
			l = len(b)
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	return n
}

func (m *TransactionsSyncResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		n += m.Data.Size()
	}
	return n
}

func (m *TransactionsSyncResponse_TransactionsNum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovRpc(uint64(m.TransactionsNum))
	return n
}
func (m *TransactionsSyncResponse_Transactions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Transactions != nil {
		l = m.Transactions.Size()
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}
func (m *TransactionPullRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TransactionIds) > 0 {
		for _, b := range m.TransactionIds {
			l = len(b)
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	return n
}

func (m *TransactionPullResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Transactions) > 0 {
		for _, b := range m.Transactions {
			l = len(b)
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	return n
}

func sovRpc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRpc(x uint64) (n int) {
	return sovRpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockIndex", wireType)
			}
			m.BlockIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheBlockId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CacheBlockId = append(m.CacheBlockId[:0], dAtA[iNdEx:postIndex]...)
			if m.CacheBlockId == nil {
				m.CacheBlockId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Block = append(m.Block[:0], dAtA[iNdEx:postIndex]...)
			if m.Block == nil {
				m.Block = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheValid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CacheValid = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutOfSyncRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutOfSyncRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutOfSyncRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockIndex", wireType)
			}
			m.BlockIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutOfSyncResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutOfSyncResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutOfSyncResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutOfSync", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutOfSync = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Block = append(m.Block[:0], dAtA[iNdEx:postIndex]...)
			if m.Block == nil {
				m.Block = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksums", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksums = append(m.Checksums, make([]byte, postIndex-iNdEx))
			copy(m.Checksums[len(m.Checksums)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Data = &SyncRequest_BlockId{v}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Data = &SyncRequest_Checksum{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SyncInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &SyncResponse_Header{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Data = &SyncResponse_Chunk{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GossipRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GossipRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GossipRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, make([]byte, postIndex-iNdEx))
			copy(m.Transactions[len(m.Transactions)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GossipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GossipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GossipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionsSyncRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionsSyncRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionsSyncRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Data = &TransactionsSyncRequest_Filter{v}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkSize", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Data = &TransactionsSyncRequest_ChunkSize{v}
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionsSyncPart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionsSyncPart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionsSyncPart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, make([]byte, postIndex-iNdEx))
			copy(m.Transactions[len(m.Transactions)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionsSyncResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionsSyncResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionsSyncResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionsNum", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Data = &TransactionsSyncResponse_TransactionsNum{v}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TransactionsSyncPart{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &TransactionsSyncResponse_Transactions{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionPullRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionPullRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionPullRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionIds", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionIds = append(m.TransactionIds, make([]byte, postIndex-iNdEx))
			copy(m.TransactionIds[len(m.TransactionIds)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionPullResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionPullResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionPullResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, make([]byte, postIndex-iNdEx))
			copy(m.Transactions[len(m.Transactions)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRpc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRpc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRpc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRpc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRpc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRpc = fmt.Errorf("proto: unexpected end of group")
)
