// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/rpc.proto

/*
	Package wavelet is a generated protocol buffer package.

	It is generated from these files:
		src/rpc.proto

	It has these top-level messages:
		QueryRequest
		QueryResponse
		OutOfSyncRequest
		OutOfSyncResponse
		SyncInfo
		SyncRequest
		SyncResponse
		DownloadTxRequest
		DownloadMissingTxRequest
		DownloadTxResponse
		Transactions
		Empty
*/
package wavelet

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type QueryRequest struct {
	RoundIndex uint64 `protobuf:"varint,1,opt,name=round_index,json=roundIndex,proto3" json:"round_index,omitempty"`
}

func (m *QueryRequest) Reset()                    { *m = QueryRequest{} }
func (m *QueryRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()               {}
func (*QueryRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{0} }

func (m *QueryRequest) GetRoundIndex() uint64 {
	if m != nil {
		return m.RoundIndex
	}
	return 0
}

type QueryResponse struct {
	Round []byte `protobuf:"bytes,1,opt,name=round,proto3" json:"round,omitempty"`
}

func (m *QueryResponse) Reset()                    { *m = QueryResponse{} }
func (m *QueryResponse) String() string            { return proto.CompactTextString(m) }
func (*QueryResponse) ProtoMessage()               {}
func (*QueryResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{1} }

func (m *QueryResponse) GetRound() []byte {
	if m != nil {
		return m.Round
	}
	return nil
}

type OutOfSyncRequest struct {
	RoundIndex uint64 `protobuf:"varint,1,opt,name=round_index,json=roundIndex,proto3" json:"round_index,omitempty"`
}

func (m *OutOfSyncRequest) Reset()                    { *m = OutOfSyncRequest{} }
func (m *OutOfSyncRequest) String() string            { return proto.CompactTextString(m) }
func (*OutOfSyncRequest) ProtoMessage()               {}
func (*OutOfSyncRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{2} }

func (m *OutOfSyncRequest) GetRoundIndex() uint64 {
	if m != nil {
		return m.RoundIndex
	}
	return 0
}

type OutOfSyncResponse struct {
	OutOfSync bool `protobuf:"varint,1,opt,name=out_of_sync,json=outOfSync,proto3" json:"out_of_sync,omitempty"`
}

func (m *OutOfSyncResponse) Reset()                    { *m = OutOfSyncResponse{} }
func (m *OutOfSyncResponse) String() string            { return proto.CompactTextString(m) }
func (*OutOfSyncResponse) ProtoMessage()               {}
func (*OutOfSyncResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{3} }

func (m *OutOfSyncResponse) GetOutOfSync() bool {
	if m != nil {
		return m.OutOfSync
	}
	return false
}

type SyncInfo struct {
	LatestRound []byte   `protobuf:"bytes,1,opt,name=latest_round,json=latestRound,proto3" json:"latest_round,omitempty"`
	Checksums   [][]byte `protobuf:"bytes,2,rep,name=checksums" json:"checksums,omitempty"`
}

func (m *SyncInfo) Reset()                    { *m = SyncInfo{} }
func (m *SyncInfo) String() string            { return proto.CompactTextString(m) }
func (*SyncInfo) ProtoMessage()               {}
func (*SyncInfo) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{4} }

func (m *SyncInfo) GetLatestRound() []byte {
	if m != nil {
		return m.LatestRound
	}
	return nil
}

func (m *SyncInfo) GetChecksums() [][]byte {
	if m != nil {
		return m.Checksums
	}
	return nil
}

type SyncRequest struct {
	// Types that are valid to be assigned to Data:
	//	*SyncRequest_RoundId
	//	*SyncRequest_Checksum
	Data isSyncRequest_Data `protobuf_oneof:"Data"`
}

func (m *SyncRequest) Reset()                    { *m = SyncRequest{} }
func (m *SyncRequest) String() string            { return proto.CompactTextString(m) }
func (*SyncRequest) ProtoMessage()               {}
func (*SyncRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{5} }

type isSyncRequest_Data interface {
	isSyncRequest_Data()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SyncRequest_RoundId struct {
	RoundId uint64 `protobuf:"varint,1,opt,name=round_id,json=roundId,proto3,oneof"`
}
type SyncRequest_Checksum struct {
	Checksum []byte `protobuf:"bytes,2,opt,name=checksum,proto3,oneof"`
}

func (*SyncRequest_RoundId) isSyncRequest_Data()  {}
func (*SyncRequest_Checksum) isSyncRequest_Data() {}

func (m *SyncRequest) GetData() isSyncRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SyncRequest) GetRoundId() uint64 {
	if x, ok := m.GetData().(*SyncRequest_RoundId); ok {
		return x.RoundId
	}
	return 0
}

func (m *SyncRequest) GetChecksum() []byte {
	if x, ok := m.GetData().(*SyncRequest_Checksum); ok {
		return x.Checksum
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SyncRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SyncRequest_OneofMarshaler, _SyncRequest_OneofUnmarshaler, _SyncRequest_OneofSizer, []interface{}{
		(*SyncRequest_RoundId)(nil),
		(*SyncRequest_Checksum)(nil),
	}
}

func _SyncRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SyncRequest)
	// Data
	switch x := m.Data.(type) {
	case *SyncRequest_RoundId:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.RoundId))
	case *SyncRequest_Checksum:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.Checksum)
	case nil:
	default:
		return fmt.Errorf("SyncRequest.Data has unexpected type %T", x)
	}
	return nil
}

func _SyncRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SyncRequest)
	switch tag {
	case 1: // Data.round_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Data = &SyncRequest_RoundId{x}
		return true, err
	case 2: // Data.checksum
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Data = &SyncRequest_Checksum{x}
		return true, err
	default:
		return false, nil
	}
}

func _SyncRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SyncRequest)
	// Data
	switch x := m.Data.(type) {
	case *SyncRequest_RoundId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.RoundId))
	case *SyncRequest_Checksum:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Checksum)))
		n += len(x.Checksum)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SyncResponse struct {
	// Types that are valid to be assigned to Data:
	//	*SyncResponse_Header
	//	*SyncResponse_Chunk
	Data isSyncResponse_Data `protobuf_oneof:"Data"`
}

func (m *SyncResponse) Reset()                    { *m = SyncResponse{} }
func (m *SyncResponse) String() string            { return proto.CompactTextString(m) }
func (*SyncResponse) ProtoMessage()               {}
func (*SyncResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{6} }

type isSyncResponse_Data interface {
	isSyncResponse_Data()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SyncResponse_Header struct {
	Header *SyncInfo `protobuf:"bytes,1,opt,name=header,oneof"`
}
type SyncResponse_Chunk struct {
	Chunk []byte `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

func (*SyncResponse_Header) isSyncResponse_Data() {}
func (*SyncResponse_Chunk) isSyncResponse_Data()  {}

func (m *SyncResponse) GetData() isSyncResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SyncResponse) GetHeader() *SyncInfo {
	if x, ok := m.GetData().(*SyncResponse_Header); ok {
		return x.Header
	}
	return nil
}

func (m *SyncResponse) GetChunk() []byte {
	if x, ok := m.GetData().(*SyncResponse_Chunk); ok {
		return x.Chunk
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SyncResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SyncResponse_OneofMarshaler, _SyncResponse_OneofUnmarshaler, _SyncResponse_OneofSizer, []interface{}{
		(*SyncResponse_Header)(nil),
		(*SyncResponse_Chunk)(nil),
	}
}

func _SyncResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SyncResponse)
	// Data
	switch x := m.Data.(type) {
	case *SyncResponse_Header:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Header); err != nil {
			return err
		}
	case *SyncResponse_Chunk:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.Chunk)
	case nil:
	default:
		return fmt.Errorf("SyncResponse.Data has unexpected type %T", x)
	}
	return nil
}

func _SyncResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SyncResponse)
	switch tag {
	case 1: // Data.header
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SyncInfo)
		err := b.DecodeMessage(msg)
		m.Data = &SyncResponse_Header{msg}
		return true, err
	case 2: // Data.chunk
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Data = &SyncResponse_Chunk{x}
		return true, err
	default:
		return false, nil
	}
}

func _SyncResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SyncResponse)
	// Data
	switch x := m.Data.(type) {
	case *SyncResponse_Header:
		s := proto.Size(x.Header)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SyncResponse_Chunk:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Chunk)))
		n += len(x.Chunk)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type DownloadTxRequest struct {
	SkipIds [][]byte `protobuf:"bytes,1,rep,name=skip_ids,json=skipIds" json:"skip_ids,omitempty"`
	Depth   uint64   `protobuf:"varint,2,opt,name=depth,proto3" json:"depth,omitempty"`
}

func (m *DownloadTxRequest) Reset()                    { *m = DownloadTxRequest{} }
func (m *DownloadTxRequest) String() string            { return proto.CompactTextString(m) }
func (*DownloadTxRequest) ProtoMessage()               {}
func (*DownloadTxRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{7} }

func (m *DownloadTxRequest) GetSkipIds() [][]byte {
	if m != nil {
		return m.SkipIds
	}
	return nil
}

func (m *DownloadTxRequest) GetDepth() uint64 {
	if m != nil {
		return m.Depth
	}
	return 0
}

type DownloadMissingTxRequest struct {
	Ids [][]byte `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *DownloadMissingTxRequest) Reset()                    { *m = DownloadMissingTxRequest{} }
func (m *DownloadMissingTxRequest) String() string            { return proto.CompactTextString(m) }
func (*DownloadMissingTxRequest) ProtoMessage()               {}
func (*DownloadMissingTxRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{8} }

func (m *DownloadMissingTxRequest) GetIds() [][]byte {
	if m != nil {
		return m.Ids
	}
	return nil
}

type DownloadTxResponse struct {
	Transactions [][]byte `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *DownloadTxResponse) Reset()                    { *m = DownloadTxResponse{} }
func (m *DownloadTxResponse) String() string            { return proto.CompactTextString(m) }
func (*DownloadTxResponse) ProtoMessage()               {}
func (*DownloadTxResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{9} }

func (m *DownloadTxResponse) GetTransactions() [][]byte {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type Transactions struct {
	Transactions [][]byte `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *Transactions) Reset()                    { *m = Transactions{} }
func (m *Transactions) String() string            { return proto.CompactTextString(m) }
func (*Transactions) ProtoMessage()               {}
func (*Transactions) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{10} }

func (m *Transactions) GetTransactions() [][]byte {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{11} }

func init() {
	proto.RegisterType((*QueryRequest)(nil), "wavelet.QueryRequest")
	proto.RegisterType((*QueryResponse)(nil), "wavelet.QueryResponse")
	proto.RegisterType((*OutOfSyncRequest)(nil), "wavelet.OutOfSyncRequest")
	proto.RegisterType((*OutOfSyncResponse)(nil), "wavelet.OutOfSyncResponse")
	proto.RegisterType((*SyncInfo)(nil), "wavelet.SyncInfo")
	proto.RegisterType((*SyncRequest)(nil), "wavelet.SyncRequest")
	proto.RegisterType((*SyncResponse)(nil), "wavelet.SyncResponse")
	proto.RegisterType((*DownloadTxRequest)(nil), "wavelet.DownloadTxRequest")
	proto.RegisterType((*DownloadMissingTxRequest)(nil), "wavelet.DownloadMissingTxRequest")
	proto.RegisterType((*DownloadTxResponse)(nil), "wavelet.DownloadTxResponse")
	proto.RegisterType((*Transactions)(nil), "wavelet.Transactions")
	proto.RegisterType((*Empty)(nil), "wavelet.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Wavelet service

type WaveletClient interface {
	Gossip(ctx context.Context, opts ...grpc.CallOption) (Wavelet_GossipClient, error)
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	CheckOutOfSync(ctx context.Context, in *OutOfSyncRequest, opts ...grpc.CallOption) (*OutOfSyncResponse, error)
	Sync(ctx context.Context, opts ...grpc.CallOption) (Wavelet_SyncClient, error)
	DownloadTx(ctx context.Context, in *DownloadTxRequest, opts ...grpc.CallOption) (*DownloadTxResponse, error)
	DownloadMissingTx(ctx context.Context, in *DownloadMissingTxRequest, opts ...grpc.CallOption) (*DownloadTxResponse, error)
}

type waveletClient struct {
	cc *grpc.ClientConn
}

func NewWaveletClient(cc *grpc.ClientConn) WaveletClient {
	return &waveletClient{cc}
}

func (c *waveletClient) Gossip(ctx context.Context, opts ...grpc.CallOption) (Wavelet_GossipClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Wavelet_serviceDesc.Streams[0], c.cc, "/wavelet.Wavelet/Gossip", opts...)
	if err != nil {
		return nil, err
	}
	x := &waveletGossipClient{stream}
	return x, nil
}

type Wavelet_GossipClient interface {
	Send(*Transactions) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type waveletGossipClient struct {
	grpc.ClientStream
}

func (x *waveletGossipClient) Send(m *Transactions) error {
	return x.ClientStream.SendMsg(m)
}

func (x *waveletGossipClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *waveletClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := grpc.Invoke(ctx, "/wavelet.Wavelet/Query", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waveletClient) CheckOutOfSync(ctx context.Context, in *OutOfSyncRequest, opts ...grpc.CallOption) (*OutOfSyncResponse, error) {
	out := new(OutOfSyncResponse)
	err := grpc.Invoke(ctx, "/wavelet.Wavelet/CheckOutOfSync", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waveletClient) Sync(ctx context.Context, opts ...grpc.CallOption) (Wavelet_SyncClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Wavelet_serviceDesc.Streams[1], c.cc, "/wavelet.Wavelet/Sync", opts...)
	if err != nil {
		return nil, err
	}
	x := &waveletSyncClient{stream}
	return x, nil
}

type Wavelet_SyncClient interface {
	Send(*SyncRequest) error
	Recv() (*SyncResponse, error)
	grpc.ClientStream
}

type waveletSyncClient struct {
	grpc.ClientStream
}

func (x *waveletSyncClient) Send(m *SyncRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *waveletSyncClient) Recv() (*SyncResponse, error) {
	m := new(SyncResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *waveletClient) DownloadTx(ctx context.Context, in *DownloadTxRequest, opts ...grpc.CallOption) (*DownloadTxResponse, error) {
	out := new(DownloadTxResponse)
	err := grpc.Invoke(ctx, "/wavelet.Wavelet/DownloadTx", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waveletClient) DownloadMissingTx(ctx context.Context, in *DownloadMissingTxRequest, opts ...grpc.CallOption) (*DownloadTxResponse, error) {
	out := new(DownloadTxResponse)
	err := grpc.Invoke(ctx, "/wavelet.Wavelet/DownloadMissingTx", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Wavelet service

type WaveletServer interface {
	Gossip(Wavelet_GossipServer) error
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	CheckOutOfSync(context.Context, *OutOfSyncRequest) (*OutOfSyncResponse, error)
	Sync(Wavelet_SyncServer) error
	DownloadTx(context.Context, *DownloadTxRequest) (*DownloadTxResponse, error)
	DownloadMissingTx(context.Context, *DownloadMissingTxRequest) (*DownloadTxResponse, error)
}

func RegisterWaveletServer(s *grpc.Server, srv WaveletServer) {
	s.RegisterService(&_Wavelet_serviceDesc, srv)
}

func _Wavelet_Gossip_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WaveletServer).Gossip(&waveletGossipServer{stream})
}

type Wavelet_GossipServer interface {
	SendAndClose(*Empty) error
	Recv() (*Transactions, error)
	grpc.ServerStream
}

type waveletGossipServer struct {
	grpc.ServerStream
}

func (x *waveletGossipServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *waveletGossipServer) Recv() (*Transactions, error) {
	m := new(Transactions)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Wavelet_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaveletServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wavelet.Wavelet/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaveletServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wavelet_CheckOutOfSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutOfSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaveletServer).CheckOutOfSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wavelet.Wavelet/CheckOutOfSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaveletServer).CheckOutOfSync(ctx, req.(*OutOfSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wavelet_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WaveletServer).Sync(&waveletSyncServer{stream})
}

type Wavelet_SyncServer interface {
	Send(*SyncResponse) error
	Recv() (*SyncRequest, error)
	grpc.ServerStream
}

type waveletSyncServer struct {
	grpc.ServerStream
}

func (x *waveletSyncServer) Send(m *SyncResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *waveletSyncServer) Recv() (*SyncRequest, error) {
	m := new(SyncRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Wavelet_DownloadTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaveletServer).DownloadTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wavelet.Wavelet/DownloadTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaveletServer).DownloadTx(ctx, req.(*DownloadTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wavelet_DownloadMissingTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadMissingTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaveletServer).DownloadMissingTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wavelet.Wavelet/DownloadMissingTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaveletServer).DownloadMissingTx(ctx, req.(*DownloadMissingTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Wavelet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wavelet.Wavelet",
	HandlerType: (*WaveletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _Wavelet_Query_Handler,
		},
		{
			MethodName: "CheckOutOfSync",
			Handler:    _Wavelet_CheckOutOfSync_Handler,
		},
		{
			MethodName: "DownloadTx",
			Handler:    _Wavelet_DownloadTx_Handler,
		},
		{
			MethodName: "DownloadMissingTx",
			Handler:    _Wavelet_DownloadMissingTx_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Gossip",
			Handler:       _Wavelet_Gossip_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Sync",
			Handler:       _Wavelet_Sync_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "src/rpc.proto",
}

func (m *QueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoundIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.RoundIndex))
	}
	return i, nil
}

func (m *QueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Round) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Round)))
		i += copy(dAtA[i:], m.Round)
	}
	return i, nil
}

func (m *OutOfSyncRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutOfSyncRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoundIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.RoundIndex))
	}
	return i, nil
}

func (m *OutOfSyncResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutOfSyncResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OutOfSync {
		dAtA[i] = 0x8
		i++
		if m.OutOfSync {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SyncInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LatestRound) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.LatestRound)))
		i += copy(dAtA[i:], m.LatestRound)
	}
	if len(m.Checksums) > 0 {
		for _, b := range m.Checksums {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRpc(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *SyncRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		nn1, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *SyncRequest_RoundId) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	i = encodeVarintRpc(dAtA, i, uint64(m.RoundId))
	return i, nil
}
func (m *SyncRequest_Checksum) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Checksum != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Checksum)))
		i += copy(dAtA[i:], m.Checksum)
	}
	return i, nil
}
func (m *SyncResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		nn2, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	return i, nil
}

func (m *SyncResponse_Header) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.Header.Size()))
		n3, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *SyncResponse_Chunk) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Chunk != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Chunk)))
		i += copy(dAtA[i:], m.Chunk)
	}
	return i, nil
}
func (m *DownloadTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownloadTxRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SkipIds) > 0 {
		for _, b := range m.SkipIds {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRpc(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.Depth != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.Depth))
	}
	return i, nil
}

func (m *DownloadMissingTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownloadMissingTxRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, b := range m.Ids {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRpc(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *DownloadTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownloadTxResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Transactions) > 0 {
		for _, b := range m.Transactions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRpc(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *Transactions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transactions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Transactions) > 0 {
		for _, b := range m.Transactions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRpc(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeFixed64Rpc(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Rpc(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRpc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *QueryRequest) Size() (n int) {
	var l int
	_ = l
	if m.RoundIndex != 0 {
		n += 1 + sovRpc(uint64(m.RoundIndex))
	}
	return n
}

func (m *QueryResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Round)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *OutOfSyncRequest) Size() (n int) {
	var l int
	_ = l
	if m.RoundIndex != 0 {
		n += 1 + sovRpc(uint64(m.RoundIndex))
	}
	return n
}

func (m *OutOfSyncResponse) Size() (n int) {
	var l int
	_ = l
	if m.OutOfSync {
		n += 2
	}
	return n
}

func (m *SyncInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.LatestRound)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if len(m.Checksums) > 0 {
		for _, b := range m.Checksums {
			l = len(b)
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	return n
}

func (m *SyncRequest) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		n += m.Data.Size()
	}
	return n
}

func (m *SyncRequest_RoundId) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovRpc(uint64(m.RoundId))
	return n
}
func (m *SyncRequest_Checksum) Size() (n int) {
	var l int
	_ = l
	if m.Checksum != nil {
		l = len(m.Checksum)
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}
func (m *SyncResponse) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		n += m.Data.Size()
	}
	return n
}

func (m *SyncResponse_Header) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}
func (m *SyncResponse_Chunk) Size() (n int) {
	var l int
	_ = l
	if m.Chunk != nil {
		l = len(m.Chunk)
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}
func (m *DownloadTxRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.SkipIds) > 0 {
		for _, b := range m.SkipIds {
			l = len(b)
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	if m.Depth != 0 {
		n += 1 + sovRpc(uint64(m.Depth))
	}
	return n
}

func (m *DownloadMissingTxRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, b := range m.Ids {
			l = len(b)
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	return n
}

func (m *DownloadTxResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Transactions) > 0 {
		for _, b := range m.Transactions {
			l = len(b)
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	return n
}

func (m *Transactions) Size() (n int) {
	var l int
	_ = l
	if len(m.Transactions) > 0 {
		for _, b := range m.Transactions {
			l = len(b)
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	return n
}

func (m *Empty) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovRpc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRpc(x uint64) (n int) {
	return sovRpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundIndex", wireType)
			}
			m.RoundIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundIndex |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Round = append(m.Round[:0], dAtA[iNdEx:postIndex]...)
			if m.Round == nil {
				m.Round = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutOfSyncRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutOfSyncRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutOfSyncRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundIndex", wireType)
			}
			m.RoundIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundIndex |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutOfSyncResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutOfSyncResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutOfSyncResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutOfSync", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutOfSync = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestRound", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestRound = append(m.LatestRound[:0], dAtA[iNdEx:postIndex]...)
			if m.LatestRound == nil {
				m.LatestRound = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksums", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksums = append(m.Checksums, make([]byte, postIndex-iNdEx))
			copy(m.Checksums[len(m.Checksums)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Data = &SyncRequest_RoundId{v}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Data = &SyncRequest_Checksum{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SyncInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &SyncResponse_Header{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Data = &SyncResponse_Chunk{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownloadTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownloadTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownloadTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipIds", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SkipIds = append(m.SkipIds, make([]byte, postIndex-iNdEx))
			copy(m.SkipIds[len(m.SkipIds)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depth", wireType)
			}
			m.Depth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Depth |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownloadMissingTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownloadMissingTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownloadMissingTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, make([]byte, postIndex-iNdEx))
			copy(m.Ids[len(m.Ids)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownloadTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownloadTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownloadTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, make([]byte, postIndex-iNdEx))
			copy(m.Transactions[len(m.Transactions)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Transactions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transactions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transactions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, make([]byte, postIndex-iNdEx))
			copy(m.Transactions[len(m.Transactions)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRpc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRpc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRpc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRpc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRpc   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("src/rpc.proto", fileDescriptorRpc) }

var fileDescriptorRpc = []byte{
	// 539 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0x93, 0xf5, 0xef, 0x4e, 0xb3, 0xa9, 0xb5, 0xb6, 0xa9, 0xeb, 0x50, 0xd9, 0x2c, 0x21,
	0x55, 0x02, 0x75, 0xa8, 0xbd, 0x19, 0xb7, 0xa3, 0x68, 0xad, 0x10, 0x1a, 0x98, 0x21, 0x2e, 0xb8,
	0x88, 0x42, 0xe2, 0xd2, 0xa8, 0x9d, 0x1d, 0x62, 0x87, 0xad, 0x6f, 0xc1, 0x13, 0xf0, 0x3c, 0x5c,
	0xf2, 0x08, 0xa8, 0xbc, 0x08, 0x8a, 0x93, 0x38, 0x69, 0x37, 0x69, 0xbb, 0x6a, 0xcf, 0xe7, 0xf3,
	0xfd, 0x7c, 0x8e, 0xcf, 0x51, 0x60, 0x47, 0x84, 0xee, 0x69, 0x18, 0xb8, 0xfd, 0x20, 0xe4, 0x92,
	0xa3, 0xda, 0x8d, 0xf3, 0x83, 0x2e, 0xa8, 0xc4, 0xa7, 0x60, 0x7d, 0x88, 0x68, 0xb8, 0x24, 0xf4,
	0x7b, 0x44, 0x85, 0x44, 0x4f, 0xa1, 0x11, 0xf2, 0x88, 0x79, 0xb6, 0xcf, 0x3c, 0x7a, 0xdb, 0x36,
	0x8f, 0xcd, 0x5e, 0x99, 0x80, 0x92, 0x26, 0xb1, 0x82, 0x9f, 0xc1, 0x4e, 0x6a, 0x10, 0x01, 0x67,
	0x82, 0xa2, 0x3d, 0xa8, 0xa8, 0x63, 0x95, 0x6b, 0x91, 0x24, 0xc0, 0x43, 0x68, 0x5e, 0x46, 0xf2,
	0x72, 0xfa, 0x71, 0xc9, 0xdc, 0x47, 0xb3, 0x87, 0xd0, 0x2a, 0x98, 0x52, 0x7e, 0x17, 0x1a, 0x3c,
	0x92, 0x36, 0x9f, 0xda, 0x62, 0xc9, 0x5c, 0xe5, 0xaa, 0x93, 0x6d, 0x9e, 0xe5, 0xe1, 0xb7, 0x50,
	0x8f, 0x7f, 0x27, 0x6c, 0xca, 0xd1, 0x09, 0x58, 0x0b, 0x47, 0x52, 0x21, 0xed, 0x62, 0x49, 0x8d,
	0x44, 0x23, 0xb1, 0x84, 0x9e, 0xc0, 0xb6, 0x3b, 0xa3, 0xee, 0x5c, 0x44, 0xd7, 0xa2, 0xbd, 0x75,
	0x5c, 0xea, 0x59, 0x24, 0x17, 0xf0, 0x7b, 0x68, 0x14, 0x2b, 0x3e, 0x82, 0x7a, 0x5a, 0x71, 0xc2,
	0x2a, 0x8f, 0x0d, 0x52, 0x4b, 0x0a, 0x8e, 0x49, 0xf5, 0xcc, 0xd8, 0xde, 0x8a, 0x2f, 0x1a, 0x1b,
	0x44, 0x2b, 0xe7, 0x55, 0x28, 0x8f, 0x1c, 0xe9, 0xe0, 0x2f, 0x60, 0xad, 0xb5, 0xf3, 0x1c, 0xaa,
	0x33, 0xea, 0x78, 0x34, 0x54, 0xc0, 0xc6, 0xa0, 0xd5, 0x4f, 0x47, 0xd1, 0xcf, 0xba, 0x18, 0x1b,
	0x24, 0x4d, 0x41, 0x07, 0x50, 0x71, 0x67, 0x11, 0x9b, 0x6b, 0x7e, 0x12, 0x6a, 0xf8, 0x08, 0x5a,
	0x23, 0x7e, 0xc3, 0x16, 0xdc, 0xf1, 0xae, 0x6e, 0xb3, 0xa2, 0x0f, 0xa1, 0x2e, 0xe6, 0x7e, 0x60,
	0xfb, 0x9e, 0x68, 0x9b, 0xaa, 0xc1, 0x5a, 0x1c, 0x4f, 0x3c, 0x11, 0xcf, 0xca, 0xa3, 0x81, 0x9c,
	0x29, 0x5e, 0x99, 0x24, 0x01, 0x7e, 0x01, 0xed, 0x8c, 0xf2, 0xce, 0x17, 0xc2, 0x67, 0xdf, 0x72,
	0x58, 0x13, 0x4a, 0x39, 0x27, 0xfe, 0x8b, 0xcf, 0x00, 0x15, 0xef, 0x4c, 0xdb, 0xc2, 0x60, 0xc9,
	0xd0, 0x61, 0xc2, 0x71, 0xa5, 0xcf, 0x59, 0x66, 0x58, 0xd3, 0xf0, 0x00, 0xac, 0xab, 0x42, 0xfc,
	0x28, 0x4f, 0x0d, 0x2a, 0x6f, 0xae, 0x03, 0xb9, 0x1c, 0xfc, 0x2a, 0x41, 0xed, 0x73, 0xf2, 0x52,
	0x68, 0x08, 0xd5, 0x0b, 0x2e, 0x84, 0x1f, 0xa0, 0x7d, 0xfd, 0x7a, 0x45, 0x72, 0x67, 0x57, 0xcb,
	0xca, 0x8c, 0x8d, 0x9e, 0x89, 0xce, 0xa0, 0xa2, 0x16, 0xb7, 0xe0, 0x29, 0x6e, 0x7e, 0xe7, 0x60,
	0x53, 0x4e, 0x3a, 0xc3, 0x06, 0x9a, 0xc0, 0xee, 0xeb, 0x78, 0xac, 0x7a, 0x37, 0xd1, 0xa1, 0xce,
	0xdd, 0x5c, 0xf2, 0x4e, 0xe7, 0xbe, 0x23, 0x8d, 0x7a, 0x05, 0x65, 0x05, 0xd8, 0x5b, 0x9b, 0x7a,
	0xe6, 0xdd, 0xdf, 0x50, 0x33, 0x5b, 0xcf, 0x7c, 0x69, 0xa2, 0x0b, 0x80, 0xfc, 0xdd, 0x51, 0x7e,
	0xcd, 0x9d, 0x05, 0xe8, 0x1c, 0xdd, 0x7b, 0xa6, 0x6b, 0xf8, 0x94, 0x2f, 0x8d, 0x1e, 0x37, 0x3a,
	0xb9, 0xe3, 0xd9, 0x5c, 0x85, 0x07, 0xb0, 0xe7, 0xcd, 0xdf, 0xab, 0xae, 0xf9, 0x67, 0xd5, 0x35,
	0xff, 0xae, 0xba, 0xe6, 0xcf, 0x7f, 0x5d, 0xe3, 0x6b, 0x55, 0x7d, 0x6b, 0x86, 0xff, 0x03, 0x00,
	0x00, 0xff, 0xff, 0x42, 0x34, 0xae, 0xcf, 0x7c, 0x04, 0x00, 0x00,
}
